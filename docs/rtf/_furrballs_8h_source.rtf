{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;\red0\green128\blue0;\red96\green64\blue32;\rede0\green128\blue0;\red128\green0\blue0;\red128\green96\blue32;\red0\green32\blue128;\red0\green128\blue128;\red255\green0\blue255;\red0\green0\blue0;\red112\green0\blue112;\red255\green0\blue0;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\paperw11900\paperh16840\margl1800\margr1800\margt1440\margb1440\gutter0\ltrsect}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs12\cgrid \sbasedon0 \snext0 heading 6;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext50 Code Example 9;}
{\s50\li3600\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext51 Code Example 10;}
{\s51\li3960\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext52 Code Example 11;}
{\s52\li4320\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 12;}
{\s53\li4680\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext53 Code Example 13;}
{\s60\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext61 List Continue 0;}
{\s61\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext62 List Continue 1;}
{\s62\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext63 List Continue 2;}
{\s63\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext64 List Continue 3;}
{\s64\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext65 List Continue 4;}
{\s65\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext66 List Continue 5;}
{\s66\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext67 List Continue 6;}
{\s67\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext68 List Continue 7;}
{\s68\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext69 List Continue 8;}
{\s69\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext70 List Continue 9;}
{\s70\li3600\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext71 List Continue 10;}
{\s71\li3960\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext72 List Continue 11;}
{\s72\li4320\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 12;}
{\s73\li4680\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext73 List Continue 13;}
{\s80\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext81 DescContinue 0;}
{\s81\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext82 DescContinue 1;}
{\s82\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext83 DescContinue 2;}
{\s83\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext84 DescContinue 3;}
{\s84\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext85 DescContinue 4;}
{\s85\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext86 DescContinue 5;}
{\s86\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext87 DescContinue 6;}
{\s87\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext88 DescContinue 7;}
{\s88\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext89 DescContinue 8;}
{\s89\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext90 DescContinue 9;}
{\s90\li3600\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext91 DescContinue 10;}
{\s91\li3960\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext92 DescContinue 11;}
{\s92\li4320\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 12;}
{\s93\li4680\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext93 DescContinue 13;}
{\s100\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext101 LatexTOC 0;}
{\s101\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext102 LatexTOC 1;}
{\s102\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext103 LatexTOC 2;}
{\s103\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext104 LatexTOC 3;}
{\s104\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext105 LatexTOC 4;}
{\s105\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext106 LatexTOC 5;}
{\s106\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext107 LatexTOC 6;}
{\s107\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext108 LatexTOC 7;}
{\s108\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext109 LatexTOC 8;}
{\s109\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext110 LatexTOC 9;}
{\s110\li3600\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext111 LatexTOC 10;}
{\s111\li3960\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext112 LatexTOC 11;}
{\s112\li4320\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 12;}
{\s113\li4680\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext113 LatexTOC 13;}
{\s120\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext121 \sautoupd List Bullet 0;}
{\s121\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext122 \sautoupd List Bullet 1;}
{\s122\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext123 \sautoupd List Bullet 2;}
{\s123\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext124 \sautoupd List Bullet 3;}
{\s124\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext125 \sautoupd List Bullet 4;}
{\s125\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext126 \sautoupd List Bullet 5;}
{\s126\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext127 \sautoupd List Bullet 6;}
{\s127\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext128 \sautoupd List Bullet 7;}
{\s128\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext129 \sautoupd List Bullet 8;}
{\s129\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext130 \sautoupd List Bullet 9;}
{\s130\fi-360\li3960\widctlpar\jclisttab\tx3960{\*\pn \pnlvlbody\ilvl0\ls11\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext131 \sautoupd List Bullet 10;}
{\s131\fi-360\li4320\widctlpar\jclisttab\tx4320{\*\pn \pnlvlbody\ilvl0\ls12\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext132 \sautoupd List Bullet 11;}
{\s132\fi-360\li4680\widctlpar\jclisttab\tx4680{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 12;}
{\s133\fi-360\li5040\widctlpar\jclisttab\tx5040{\*\pn \pnlvlbody\ilvl0\ls14\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext133 \sautoupd List Bullet 13;}
{\s140\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext141 \sautoupd List Enum 0;}
{\s141\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext142 \sautoupd List Enum 1;}
{\s142\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext143 \sautoupd List Enum 2;}
{\s143\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext144 \sautoupd List Enum 3;}
{\s144\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext145 \sautoupd List Enum 4;}
{\s145\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext146 \sautoupd List Enum 5;}
{\s146\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext147 \sautoupd List Enum 6;}
{\s147\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext148 \sautoupd List Enum 7;}
{\s148\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext149 \sautoupd List Enum 8;}
{\s149\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext150 \sautoupd List Enum 9;}
{\s150\fi-360\li3960\widctlpar\fs20\cgrid \sbasedon0 \snext151 \sautoupd List Enum 10;}
{\s151\fi-360\li4320\widctlpar\fs20\cgrid \sbasedon0 \snext152 \sautoupd List Enum 11;}
{\s152\fi-360\li4680\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 12;}
{\s153\fi-360\li5040\widctlpar\fs20\cgrid \sbasedon0 \snext153 \sautoupd List Enum 13;}
}
{\*\listtable
{\list\listtemplateid1
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8226 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u8662 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9702 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9642 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid1}
{\list\listtemplateid2
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9744 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid2}
{\list\listtemplateid3
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li360 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li720 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1080 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1440 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li1800 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2160 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2520 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li2880 }
{ \listlevel\levelnfc23\leveljc0\levelstartat1\levelfollow0{\leveltext \'01\u9746 ?;}{\levelnumbers;}\f8\dbch\af3\fi-360\li3600 }
\listid3}
}
{\listoverridetable
{\listoverride\listid1\listoverridecount0\ls1}
{\listoverride\listid2\listoverridecount0\ls2}
{\listoverride\listid3\listoverridecount0\ls3}
}
{\comment begin body}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
Furrballs.h\par \pard\plain 
{\tc\tcl2 \v Furrballs/include/Furrballs.h}
{\xe \v Furrballs/include/Furrballs.h}
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\par
\pard\plain \s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 00001 {\cf20 /*****************************************************************/}{\cf20 /**}\par
00002 {\cf20  * \\file   Furrballs.h}\par
00003 {\cf20  * \\brief Primary interface for the Furrball library.}\par
00004 {\cf20  *}\par
00005 {\cf20  * This file contains the main classes and functions that users will interact with when using the Furrball library.}\par
00006 {\cf20  * The library provides a caching and database management system using RocksDB and various caching policies.}\par
00007 {\cf20  *}\par
00008 {\cf20  * \\author The Sphynx}\par
00009 {\cf20  * \\date   July 2024}\par
00010 {\cf20  *********************************************************************/}\par
00011 {\cf21 #}{\cf21 pragma} {\cf21 once}\par
00012 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 memory}{\cf21 >}\par
00013 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 string}{\cf21 >}\par
00014 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 filesystem}{\cf21 >}\par
00015 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 thread}{\cf21 >}\par
00016 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 rocksdb}{\cf21 /}{\cf21 db}{\cf21 .}{\cf21 h}{\cf21 >}\par
00017 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 rocksdb}{\cf21 /}{\cf21 options}{\cf21 .}{\cf21 h}{\cf21 >}\par
00018 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 rocksdb}{\cf21 /}{\cf21 advanced_cache}{\cf21 .}{\cf21 h}{\cf21 >}\par
00019 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 unordered_map}{\cf21 >}\par
00020 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 type_traits}{\cf21 >}\par
00021 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 Logger}{\cf21 .}{\cf21 h}{\cf21 >}\par
00022 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 mutex}{\cf21 >}\par
00023 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 optional}{\cf21 >}\par
00024 \par
00025 {\cf21 #}{\cf21 ifdef} _WIN32\par
00026 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 windows}{\cf21 .}{\cf21 h}{\cf21 >}\par
00027 {\cf21 #}{\cf21 else}\par
00028 {\cf21 #}{\cf21 include} {\cf21 <}{\cf21 unistd}{\cf21 .}{\cf21 h}{\cf21 >}\par
00029 {\cf21 #}{\cf21 endif}\par
00030 \par
00031 {\cf20 //Furrball, compact and filled with spit !}\par
00032 {\cf17 namespace} Furrball \{\par
00033     {\cf17 class} MemoryManager \{\par
00034     {\cf17 private}:\par
00035         {\cf17 inline} {\cf17 static} std::mutex FreeingMutex;\par
00036         {\cf17 inline} {\cf17 static} std::mutex ProtectMutex;\par
00037     {\cf17 public}:\par
00038         {\cf17 static} {\cf18 void}* AllocateMemory(size_t totalSize) \{\par
00039 {\cf21 #}{\cf21 ifdef} _WIN32\par
00040             {\cf18 void}* buffer = VirtualAlloc({\cf18 nullptr}, totalSize, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);\par
00041             {\cf19 if} (!buffer) \{\par
00042                 {\cf19 return} {\cf18 nullptr};\par
00043             \}\par
00044 {\cf21 #}{\cf21 else}\par
00045             size_t pageSize = sysconf(_SC_PAGESIZE);\par
00046             {\cf18 void}* buffer = {\cf18 nullptr};\par
00047             {\cf19 if} (posix_memalign(&buffer, pageSize, totalSize) != 0) \{\par
00048                 {\cf19 return} {\cf18 nullptr};\par
00049             \}\par
00050 {\cf21 #}{\cf21 endif}\par
00051             {\cf19 return} buffer;\par
00052         \}\par
00053         {\cf20 /**}\par
00054 {\cf20          * .}\par
00055 {\cf20          */}\par
00056         {\cf17 static} {\cf18 bool} ProtectMemory({\cf18 void}* buffer, {\cf17 const} size_t& size) \{\par
00057             std::lock_guard<std::mutex> lock(ProtectMutex);\par
00058 {\cf21 #}{\cf21 ifdef} _WIN32\par
00059             DWORD oldProtect;\par
00060             {\cf19 if} (!VirtualProtect(buffer, size, PAGE_READWRITE, &oldProtect)) \{\par
00061                 Logger::getInstance().error({\cf22 "Failed to set memory protection on Windows"});\par
00062                 {\cf19 return} {\cf17 false};\par
00063             \}\par
00064 {\cf21 #}{\cf21 else}\par
00065             {\cf19 if} (mprotect(buffer, size, PROT_READ | PROT_WRITE) != 0) \{\par
00066                 Logger::getInstance().error({\cf22 "Failed to set memory protection on Linux"});\par
00067                 {\cf19 return} {\cf17 false};\par
00068             \}\par
00069 {\cf21 #}{\cf21 endif}\par
00070             {\cf19 return} {\cf17 true};\par
00071         \}\par
00072         {\cf20 /**}\par
00073 {\cf20          * @brief Frees allocated buffer.}\par
00074 {\cf20          * }\par
00075 {\cf20          * FreeMemory is a blocking operation.}\par
00076 {\cf20          */}\par
00077         {\cf17 static} {\cf18 void} FreeMemory({\cf18 void}* buffer) \{\par
00078             std::lock_guard<std::mutex> lock(FreeingMutex);\par
00079 {\cf21 #}{\cf21 ifdef} _WIN32\par
00080             VirtualFree(buffer, 0, MEM_RELEASE);\par
00081 {\cf21 #}{\cf21 else}\par
00082             free(buffer);\par
00083 {\cf21 #}{\cf21 endif}\par
00084         \}\par
00085         {\cf20 /**}\par
00086 {\cf20          * @brief Returns the available memory, works for both Windows and Unix}\par
00087 {\cf20          */}\par
00088         {\cf17 static} size_t GetAvailableMemory() \{\par
00089 {\cf21 #}{\cf21 ifdef} _WIN32\par
00090             MEMORYSTATUSEX status;\par
00091             status.dwLength = {\cf17 sizeof}(status);\par
00092             GlobalMemoryStatusEx(&status);\par
00093             {\cf19 return} status.ullAvailPhys;\par
00094 {\cf21 #}{\cf21 else}\par
00095             {\cf18 long} pages = sysconf(_SC_AVPHYS_PAGES);\par
00096             {\cf18 long} page_size = sysconf(_SC_PAGE_SIZE);\par
00097             {\cf19 return} pages * page_size;\par
00098 {\cf21 #}{\cf21 endif}\par
00099         \}\par
00100         {\cf20 /**}\par
00101 {\cf20          * @brief Attempts to allocate increasingly larger blocks of memory until it fails, then returns the size of the largest successful allocation.}\par
00102 {\cf20          */}\par
00103         {\cf17 static} size_t GetLargestContiguousBlock() \{\par
00104             size_t step = 1024 * 1024; {\cf20 // Start with 1MB}\par
00105             size_t maxBlockSize = 0;\par
00106             {\cf18 void}* buffer = {\cf18 nullptr};\par
00107 \par
00108             {\cf19 while} ({\cf17 true}) \{\par
00109                 buffer = AllocateMemory(maxBlockSize + step);\par
00110                 {\cf19 if} (buffer) \{\par
00111                     FreeMemory(buffer);\par
00112                     maxBlockSize += step;\par
00113                 \}\par
00114                 {\cf19 else} \{\par
00115                     {\cf19 break};\par
00116                 \}\par
00117             \}\par
00118 \par
00119             {\cf19 return} maxBlockSize;\par
00120         \}\par
00121     \};\par
00122 \par
00123     {\cf20 /**}\par
00124 {\cf20      * @brief Implements the ARC eviction policy}\par
00125 {\cf20      * TODO: Implement Adaptive Memory Pooling (AMP)}\par
00126 {\cf20      * You can create and manage your own cache separately by instantiating a Policy object and using it.}\par
00127 {\cf20      * @see S3FIFOPolicy}\par
00128 {\cf20      * @see LRUPolicy}\par
00129 {\cf20      * @see LFUPolicy}\par
00130 {\cf20      */}\par
00131     {\cf17 template}<{\cf17 class} Key, {\cf17 class} Value>\par
00132     {\cf17 class} ARCPolicy \{\par
00133     {\cf17 public}:\par
00134         {\cf17 typedef} {\cf18 void}(*EvictionCallback)(Key&);\par
00135     {\cf17 private}:\par
00136         std::list<Key> t1;  {\cf20 // Recently added}\par
00137         std::list<Key> t2;  {\cf20 // Recently used}\par
00138         std::list<Key> b1;  {\cf20 // Ghost entries for t1}\par
00139         std::list<Key> b2;  {\cf20 // Ghost entries for t2}\par
00140         std::unordered_map<Key, Value> map;  {\cf20 // Key to value mapping}\par
00141         std::list<Key> Window; {\cf20 // t1 + t2 (the cache)}\par
00142         std::list<Key> GhostEntries; {\cf20 // b1 + b2 Ghost entries}\par
00143         size_t capacity;\par
00144         size_t p;  {\cf20 // Target size for t1}\par
00145         EvictionCallback evictionCallback = []() \{\};{\cf20 //NO-OP by default.}\par
00146 \par
00147         {\cf18 void} replace({\cf17 const} Key& key) \{\par
00148             {\cf19 if} (!t1.empty() && (t1.size() > p || (std::find(b2.begin(), b2.end(), key) != b2.end() && t1.size() == p))) \{\par
00149                 {\cf20 // Move from t1 to b1}\par
00150                 {\cf17 auto} old = t1.back();\par
00151                 t1.pop_back();\par
00152                 b1.push_front(old);\par
00153                 map.erase(old);\par
00154             \}\par
00155             {\cf19 else} \{\par
00156                 {\cf20 // Move from t2 to b2}\par
00157                 {\cf17 auto} old = t2.back();\par
00158                 t2.pop_back();\par
00159                 b2.push_front(old);\par
00160                 map.erase(old);\par
00161             \}\par
00162         \}\par
00163 \par
00164         {\cf18 void} evict() \{\par
00165             evictionCallback();\par
00166             {\cf19 if} (t1.size() + b1.size() >= capacity) \{\par
00167                 {\cf19 if} (t1.size() < capacity) \{\par
00168                     evictionCallback(b1.back())\par
00169                     b1.pop_back();\par
00170                 \}\par
00171                 {\cf19 else} \{\par
00172                     evictionCallback(t1.back())\par
00173                     t1.pop_back();\par
00174                 \}\par
00175             \}\par
00176             {\cf19 if} (t1.size() + t2.size() + b1.size() + b2.size() >= 2 * capacity) \{\par
00177                 {\cf19 if} (t2.size() + b2.size() > capacity) \{\par
00178                     evictionCallback(b2.back())\par
00179                     b2.pop_back();\par
00180                 \}\par
00181                 {\cf19 else} \{\par
00182                     evictionCallback(t2.back())\par
00183                     t2.pop_back();\par
00184                 \}\par
00185             \}\par
00186         \}\par
00187 \par
00188     {\cf17 public}:\par
00189         {\cf20 /**}\par
00190 {\cf20          * @brief Creates a cache following ARC policy.}\par
00191 {\cf20          * @param cap Capacity of the cache.}\par
00192 {\cf20          */}\par
00193         ARCPolicy(size_t cap) : capacity(cap), p(1) \{\}\par
00194 \par
00195         {\cf18 void} setEvictionCallback(EvictionCallback cb) \{\par
00196             evictionCallback = cb;\par
00197         \};\par
00198         {\cf20 /**}\par
00199 {\cf20          * @return true if the key exists.}\par
00200 {\cf20          */}\par
00201         {\cf18 bool} contains({\cf17 const} Key& key) {\cf17 const} \{\par
00202             {\cf19 return} map.find(key) != map.end();\par
00203         \}\par
00204         {\cf20 /**}\par
00205 {\cf20          * @brief Promotes a Key.}\par
00206 {\cf20          */}\par
00207         {\cf18 void} touch({\cf17 const} Key& key) \{\par
00208             {\cf19 if} (std::find(t1.begin(), t1.end(), key) != t1.end()) \{\par
00209                 t1.remove(key);\par
00210                 t2.push_front(key);\par
00211             \}\par
00212             {\cf19 else} {\cf19 if} (std::find(t2.begin(), t2.end(), key) != t2.end()) \{\par
00213                 t2.splice(t2.begin(), t2, std::find(t2.begin(), t2.end(), key));\par
00214             \}\par
00215             {\cf19 else} {\cf19 if} (std::find(b1.begin(), b1.end(), key) != b1.end()) \{\par
00216                 {\cf20 // Case when the key is in b1}\par
00217                 p = std::min(capacity, p + std::max(b2.size() / b1.size(), 1UL));\par
00218                 replace(key);\par
00219                 b1.remove(key);\par
00220                 t2.push_front(key);\par
00221                 map[key] = Value();  {\cf20 // Assuming default constructor exists}\par
00222             \}\par
00223             {\cf19 else} {\cf19 if} (std::find(b2.begin(), b2.end(), key) != b2.end()) \{\par
00224                 {\cf20 // Case when the key is in b2}\par
00225                 p = std::max(0, {\cf17 static_cast}<{\cf18 int}>(p) - std::max(b1.size() / b2.size(), 1UL));\par
00226                 replace(key);\par
00227                 b2.remove(key);\par
00228                 t2.push_front(key);\par
00229                 map[key] = Value();  {\cf20 // Assuming default constructor exists}\par
00230             \}\par
00231         \}\par
00232         {\cf20 /**}\par
00233 {\cf20          * @brief Adds a Key-Value Pair the the cache.}\par
00234 {\cf20          */}\par
00235         {\cf18 void} add({\cf17 const} Key& key, {\cf17 const} Value& value) \{\par
00236             {\cf19 if} (map.size() >= capacity) \{\par
00237                 evict();\par
00238             \}\par
00239             t1.push_front(key);\par
00240             map[key] = value;\par
00241         \}\par
00242         {\cf20 /**}\par
00243 {\cf20          * @brief Gets a value from the cache.}\par
00244 {\cf20          */}\par
00245         Value get({\cf17 const} Key& key) \{\par
00246             touch(key);\par
00247             {\cf19 return} map[key];\par
00248         \}\par
00249         {\cf20 /**}\par
00250 {\cf20          * @brief Changes a value if it exsits or adds it.}\par
00251 {\cf20          */}\par
00252         {\cf18 void} set({\cf17 const} Key& key, {\cf17 const} Value& value) \{\par
00253             {\cf19 if} (contains(key)) \{\par
00254                 map[key] = value;\par
00255                 touch(key);\par
00256             \}\par
00257             {\cf19 else} \{\par
00258                 add(key, value);\par
00259             \}\par
00260         \}\par
00261     \};\par
00262     {\cf20 /**}\par
00263 {\cf20      * @brief Implements the S3FIFO eviction policy}\par
00264 {\cf20      *}\par
00265 {\cf20      * You can Create and manage your own cache seperatly by instanciating a Policy Object and use it.}\par
00266 {\cf20      * @see ARCPolicy}\par
00267 {\cf20      * @see LRUPolicy}\par
00268 {\cf20      * @see LFUPolicy}\par
00269 {\cf20      */}\par
00270     {\cf17 template}<{\cf17 class} Key, {\cf17 class} Value>\par
00271     {\cf17 class} S3FIFOPolicy {\cf17 final} \{\par
00272     {\cf17 private}:\par
00273         std::list<Key> queue;\par
00274         std::unordered_map<Key, Value> map;\par
00275         size_t capacity;\par
00276     {\cf17 public}:\par
00277 \par
00278     \};\par
00279     {\cf20 /**}\par
00280 {\cf20      * @brief Implements the LRU eviction policy}\par
00281 {\cf20      *}\par
00282 {\cf20      * You can Create and manage your own cache seperatly by instanciating a Policy Object and use it.}\par
00283 {\cf20      * @see ARCPolicy}\par
00284 {\cf20      * @see S3FIFOPolicy}\par
00285 {\cf20      * @see LFUPolicy}\par
00286 {\cf20      */}\par
00287     {\cf17 template}<{\cf17 class} Key, {\cf17 class} Value>\par
00288     {\cf17 class} LRUPolicy {\cf17 final} \{\par
00289 \par
00290     \};\par
00291     {\cf20 /**}\par
00292 {\cf20      * @brief Implements the LFU eviction policy}\par
00293 {\cf20      *}\par
00294 {\cf20      * You can Create and manage your own cache seperatly by instanciating a Policy Object and use it.}\par
00295 {\cf20      * @see ARCPolicy}\par
00296 {\cf20      * @see LRUPolicy}\par
00297 {\cf20      * @see S3FIFOPolicy}\par
00298 {\cf20      */}\par
00299     {\cf17 template}<{\cf17 class} Key, {\cf17 class} Value>\par
00300     {\cf17 class} LFUPolicy {\cf17 final} \{\par
00301 \par
00302     \};\par
00303 \par
00304     {\cf20 /**}\par
00305 {\cf20     * @brief A Cache with size_t as Keys, void* as values and ARC eviction policy.}\par
00306 {\cf20     */}\par
00307     {\cf20 //typedef Cache<size_t, void*, ARCPolicy> ARCCache;}\par
00308     {\cf20 /**}\par
00309 {\cf20     * @class FurrBall}\par
00310 {\cf20     * @brief Furrballs are a LZ4 Compressed DB using RocksDB with Cache and Paging Logic.}\par
00311 {\cf20     */}\par
00312     {\cf17 class} FurrBall {\cf17 final} \{\par
00313     {\cf17 private}:\par
00314         {\cf17 struct} ImplDetail;\par
00315         std::unique_ptr<ImplDetail> DataMembers;\par
00316 \par
00317         size_t PageSize;\par
00318         {\cf20 //Must remain POD.}\par
00319         {\cf20 /**}\par
00320 {\cf20          * \\brief Page Metadata.}\par
00321 {\cf20          */}\par
00322         {\cf17 struct} Page \{\par
00323             {\cf18 void}* ptr;\par
00324             size_t PageIndex;\par
00325 \par
00326             Page() \{\par
00327 \par
00328             \}\par
00329 \par
00330             {\cf17 virtual} {\cf18 bool} IsLockable(){\cf17 const} {\cf17 noexcept} \{ {\cf19 return} {\cf17 false}; \};\par
00331 \par
00332             ~Page() \{\par
00333 \par
00334             \}\par
00335         \};\par
00336         {\cf17 struct} LockablePage : {\cf17 public} Page \{\par
00337             {\cf17 virtual} {\cf18 bool} IsLockable(){\cf17 const} {\cf17 noexcept} \{ {\cf19 return} {\cf17 true}; \};\par
00338         \};\par
00339         std::list<Page> PageList;\par
00340         {\cf20 /**}\par
00341 {\cf20          * @brief Cache Object.}\par
00342 {\cf20          */}\par
00343         {\cf20 //ARCPolicy<size_t,void*> ARC = ARCPolicy<size_t,void*>();}\par
00344 \par
00345         FurrBall(){\cf17 noexcept} = {\cf19 default};\par
00346         FurrBall(std::unique_ptr<ImplDetail>);\par
00347 \par
00348         {\cf17 constexpr} size_t floorAddress(size_t address){\cf17 const} {\cf17 noexcept} \{\par
00349             {\cf19 return} address & ~(PageSize - 1);\par
00350         \}\par
00351     {\cf17 public}:\par
00352         FurrBall({\cf17 const} FurrBall& cpy) = {\cf17 delete};\par
00353         FurrBall(FurrBall&& mv){\cf17 noexcept} \{\par
00354             {\cf20 //std::swap(options, mv.options);}\par
00355             {\cf20 //ARC = std::move(mv.ARC);}\par
00356         \}\par
00357         {\cf20 /**}\par
00358 {\cf20         * @brief Constructs a DB and allocates the Cache (with it's pages).}\par
00359 {\cf20         * }\par
00360 {\cf20         * Uses Paging to avoid loading the entire DB in memory and only loads following the ARC eviction policy}\par
00361 {\cf20         * @param DBpath the Path to create (or load) a DB.}\par
00362 {\cf20         * @param PageSize The Page size in bytes. }\par
00363 {\cf20         * This acts as a hint to calculate the optimal Page size, the result will be equal or larger than the specified size.}\par
00364 {\cf20         * Set to 0 if you want the library to decide the optimal size.}\par
00365 {\cf20         * MUST BE POWER OF 2. }\par
00366 {\cf20         * @param numPages The number of pages to preallocate.}\par
00367 {\cf20         * @param overwrite If DBpath points to an existing DB and this is true it will be overwritten instead of Loaded.}\par
00368 {\cf20         * @see ARCPolicy}\par
00369 {\cf20         */}\par
00370         {\cf17 static} FurrBall* CreateBall(std::string DBpath, size_t PageSize, size_t numPages, {\cf18 bool} overwrite = {\cf17 false}){\cf17 noexcept};\par
00371         {\cf20 /**}\par
00372 {\cf20          * Returns a pointer to the page that contains the vAddress. if vAddress is not found and is far from all pages available}\par
00373 {\cf20          * Get() doesn't create an entry and considers the vAddress to be invalid to preserve "contingency".}\par
00374 {\cf20          * }\par
00375 {\cf20          * @param vAddress a pointer to a virtual address used to index into the cache.}\par
00376 {\cf20          * }\par
00377 {\cf20          * @returns a valid Pointer to memory on success or nullptr_t on error.}\par
00378 {\cf20          */}\par
00379         {\cf18 void}* Get({\cf18 void}* vAddress){\cf17 noexcept} \{\par
00380             {\cf20 //Snap to page border.}\par
00381             {\cf20 //Query the Cache for the page.}\par
00382             {\cf20 //if present return it}\par
00383             {\cf20 //reload page from db and push into cache}\par
00384         \}\par
00385         {\cf20 /**}\par
00386 {\cf20          * @brief Large data is stored seperate and a pointer to it is added to the cache}\par
00387 {\cf20          * @param buffer The original data, a pointer to it is stored in the cache to avoid copying and moving data. Do not free.}\par
00388 {\cf20          * @param size Buffer size.}\par
00389 {\cf20          */}\par
00390         {\cf18 void} StoreLargeData({\cf18 void}* buffer, size_t size);\par
00391 \par
00392         {\cf17 const} LockablePage* GenerateLockablePage() \{\par
00393 \par
00394         \}\par
00395 \par
00396         {\cf17 const} Page* SetPageToLockable(Page* page) \{\par
00397 \par
00398         \}\par
00399 \par
00400         {\cf18 void} LockPage({\cf17 const} Page* page) \{\par
00401             {\cf19 if} (!page->IsLockable()) \{\par
00402                 {\cf20 //We know the pages are not really const thus this cast is allowed.}\par
00403                 page = SetPageToLockable({\cf17 const_cast}<Page*>(page));\par
00404             \}\par
00405         \}\par
00406         {\cf20 /**}\par
00407 {\cf20          * @brief Cleans up.}\par
00408 {\cf20          */}\par
00409         ~FurrBall(){\cf17 noexcept};\par
00410     \};\par
00411 \}\par
}
}